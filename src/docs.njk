{% extends "./templates/docs-layout.njk" %}
{% set current_page = 'docs' %}

{% block head %}
    <title>Documentation | rj-validate</title>
{% endblock %}

{% block body %}
    {% include "./templates/partials/left-navigation.njk" %}

    <main class="col-12 col-md-9 col-xl-8 pl-md-5" role="main">
        <div class="td-content">
           <h1>Documentation</h1>

            <!-- <div class="pageinfo pageinfo-primary">
                <p>This is a placeholder page that shows you how to use this template site.</p>
            </div> -->

            <div class="section-index">
                <hr class="panel-line">
                
                <a name="how-to-install">
                    <h2 class="h2">
                        <span class="text-muted"><a href="/docs#how-to-install">#</a></span>
                        <span> How to install:</span>
                    </h2>
                </a>

                <p>via npm:</p>

                <p><code>npm install rj-validate --save</code></p>

                <p>via a CDN:</p>

                <p>Copy the following script tag into the bottom of the page:</p>

                <p><code>&lt;script src="https://cdn.jsdelivr.net/npm/rj-validate@{{ g_latest_version }}/dist/rj.min.js"&gt;&lt;/script&gt;</code></p>


                <br>
                <a name="validating-inputs">
                    <h2 class="h2">
                        <span class="text-muted"><a href="/docs#validating-inputs">#</a></span>
                        <span> Validating an input:</span>
                    </h2>
                </a>

                <p><code>
require("rj-validate");

rj().validate('abc123', {
    required: true
});

// output:
// Object {message: "all tests pass", valid: true}
                </code>

                <p class="codepen" data-height="500" data-theme-id="dark" data-default-tab="js,result" data-user="rander" data-slug-hash="dybddrr" data-preview="true" style="height: 500px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid; margin: 1em 0; padding: 1em;" data-pen-title="rj-validate basic example">
                  <span>See the Pen <a href="https://codepen.io/rander/pen/dybddrr/">
                  rj-validate basic example</a> by Robert Anderson (<a href="https://codepen.io/rander">@rander</a>)
                  on <a href="https://codepen.io">CodePen</a>.</span>
                </p>

                <br><br>

                <p>The validate() and test() methods are interchangeable:</p>

                <p><code>
require("rj-validate");

rj().test('abc123', {
    required: true
});

// output:
// Object {message: "all tests pass", valid: true}
                </code></p>

                <p>The validate() method takes three arguments:</p>

                <p><code>
rj().validate(
    [ the input to validate (either a string or a number) ],
    [ the rules to test the input against (object) ],
    [ the name of the variable (a string) (optional) ]
)
                </code>
                </p>

                <p>The third argument is only used for displaying contextualized error messages.</p>

                <p>The output of the validate() method is an object with the following structure:</p>

                <p><code>
{
    valid: (true|false),
    message: (the specific error message)
}
                </code></p>

                <br>
                <a name="custom-error-messages">
                    <h2 class="h2">
                        <span class="text-muted"><a href="/docs#custom-error-messages">#</a></span>
                        <span> Custom error messages:</span>
                    </h2>
                </a>

                <p>If you would like to replace the default error message with your own, you can pass that message into the rules argument:</p>

                <p><code>
rj().test('', {
    required: true,
    required_msg: "That's a failure"
});

// output:
// Object {message: "That's a failure", valid: false}
                </code></p>

                <p>For each rule that you'd like to have a custom error message, add a [rule]_msg option to the rules argument, as shown above.</p>

                <br>
                <a name="validation-rules">
                    <h2 class="h2">
                        <span class="text-muted"><a href="/docs#validation-rules">#</a></span>
                        <span> Available validation options:</span>
                    </h2>
                </a>

                <p><code>
rules = {
    required:         (true|false),
    same:             {name: (string), value: (string|number|boolean)},
    different:        {name: (string), value: (string|number|boolean)},
    min:              (integer|false),
    max:              (integer|false),
    alpha:            (true|false),
    alphanumeric:     (true|false),
    numeric:          (true|false|'number'|'string'),
    number:           (true|false),
    string:           (true|false),
    date:             (true|false|'yyyy-mm-dd'|'mm/dd/yyyy'|'mm/dd/yy'),
    datetime:         (true|false|'yyyy-mm-dd hh:mm:ss'
                        |'mm/dd/yyyy hh:mm:ss'|'mm/dd/yy hh:mm:ss'),
    email:            (true|false),
    po_box:           (true|false),
    not_po_box:       (true|false),
    in:               (array|object|false),
    not_in:           (array|object|false),
    before:           (string|Date|false),
    before_or:        (string|Date|false),
    after:            (string|Date|false),
    after_or:         (string|Date|false)
}
                </code></p>

                <p>Note that a [rule]:false will always be considered valid. This option exists solely to help dynamically specify rules at runtime.</p>

                <br>
                <a name="isvalid-method">
                    <h2 class="h2">
                        <span class="text-muted"><a href="/docs#isvalid-method">#</a></span>
                        <span> isValid for faster validation:</span>
                    </h2>
                </a>

                <p>In some scenarios, you may not be interested in the specific error message and you only want to know if the request passes all validations. In those situations, you can use isValid()</p>

                <p><code>
rj().isValid('1987-10-01', {
    required: true,
    date: 'yyyy-mm-dd',
    before: '1980-01-01'
});

// output:
// false
                </code></p>

                <p class="codepen" data-height="500" data-theme-id="dark" data-default-tab="html,result" data-user="rander" data-slug-hash="jONZzyG" data-preview="true" style="height: 500px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid; margin: 1em 0; padding: 1em;" data-pen-title="rj-validate isValid example">
                  <span>See the Pen <a href="https://codepen.io/rander/pen/jONZzyG/">
                  rj-validate isValid example</a> by Robert Anderson (<a href="https://codepen.io/rander">@rander</a>)
                  on <a href="https://codepen.io">CodePen</a>.</span>
                </p>

                <br><br>
                <a name="custom-validation-rules">
                    <h2 class="h2">
                        <span class="text-muted"><a href="/docs#custom-validation-rules">#</a></span>
                        <span> Custom validation rules:</span>
                    </h2>
                </a>

                <p>If you need to use a validation rule that isn't in the list above, you can create a custom rule. Here is an example of a custom rule that checks if the first letter in a line of text is capitalized:</p>

                <p><code>
function startsWithCapital(input) {
    return input[0] === input[0].toUpperCase();
}

require("rj-validate");

rj().test('the quick brown fox jumps over the lazy dog', {
    required: true,
    min: 4,
    custom: [{
        test: function(input) {
            return startsWithCapital(input);
        },
        error_msg: 'Please start your sentences with a capital letter.'
    }]
});

// output:
// Object {message: "Please start your sentences with a capital letter.", valid: false}
                </code></p>

                <p>Custom rules give you a high degree of flexibility, while still working within the framework of a validation library. You can even use the custom validations array to reorganize which validations run before others:</p>

                <p class="codepen" data-height="500" data-theme-id="dark" data-default-tab="js,result" data-user="rander" data-slug-hash="vYBdReN" data-preview="true" style="height: 500px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid; margin: 1em 0; padding: 1em;" data-pen-title="rj-validate reordered validations">
                  <span>See the Pen <a href="https://codepen.io/rander/pen/vYBdReN/">
                  rj-validate reordered validations</a> by Robert Anderson (<a href="https://codepen.io/rander">@rander</a>)
                  on <a href="https://codepen.io">CodePen</a>.</span>
                </p>

                <br><br>
                <a name="validating-many-inputs">
                    <h2 class="h2">
                        <span class="text-muted"><a href="/docs#validating-many-inputs">#</a></span>
                        <span> Validating multiple inputs:</span>
                    </h2>
                </a>

                <p>You can also validate multiple inputs at the same time with the validateAll() method:</p>

                <p><code>
require("rj-validate");

rj().validateAll([
    {
        name: 'first name',
        value: 'Hubert!',
        rules: {
            required: true,
            min: 2,
            alpha: true
        },
    },

    {
        name: 'middle name',
        value: 'J',
        rules: {
            min: 2,
            alpha: true
        }
    },

    {
        name: 'last name',
        value: 'Farnsworth',
        rules: {
            required: true,
            min: 2,
            alpha: true
        }
    },

    {
        name: 'suffix',
        value: '',
        rules: {
            in: ['Jr', 'Sr', 'III', 'IV']
        }
    }
]);

// output:
Object {
    'first name': {
        valid: false,
        message: 'first name may only contain letters'
    },

    'middle name': {
        valid: false,
        message: 'middle name must be 2 or longer'
    },

    'last name': {
        valid: true,
        message: 'All tests pass'
    },

    'suffix': {
        valid: true,
        message: 'All tests pass'
    }
}
                </code></p>

                <br>
                <a name="more-examples">
                    <h2 class="h2">
                        <span class="text-muted"><a href="/docs#more-examples">#</a></span>
                        <span> More Examples:</span>
                    </h2>
                </a>

                <p><code>
require("rj-validate");

var rj = rj();

rj.test('abc123', {
    required: true
});

// output:
// Object {message: "all tests pass", valid: true}


rj.test('', {
    required: true
});

// output:
// Object {message: "Required", valid: false}


rj.test('', {
    required: true
}, 'first name');

// output:
// Object {message: "first name is required", valid: false}


rj.test('', {
    required: true,
    required_msg: "That's a failure"
});

// output:
// Object {message: "That's a failure", valid: false}


rj.validate('foobar', {
    required: true,
    required_msg: 'Profile name is definitely required',
    min: 7,
    min_msg: "Hold on, that profile name isn't long enough"
});

// output:
// Object {message: "Hold on, that profile name isn't long enough", valid: false}
                </code></p>

                <br>
                <a name="changelog">
                    <h2 class="h2">
                        <span class="text-muted"><a href="/docs#changelog">#</a></span>
                        <span> Changelog:</span>
                    </h2>
                </a>

                <p>v1.3.2</p>

                <p>Moved the documentation out of the readme file</p>

                <p>v1.3.1</p>

                <p>Fixed a bug with using the library as a CDN</p>

                <p>v1.2.0</p>

                <p>Fixed a bug with module exports and using the library as a CDN</p>

                <p>v1.1.0</p>

                <p>The library now exports a function instead of a object. The readme file and tests have been updated to reflect this change.</p>
            </div>

            <br>
            <div class="text-muted mt-5 pt-3 pb-2 border-top">
                <span>Last modified {{ g_last_modified }}</span>
            </div>
        </div>
    </main>
    <script async src="https://static.codepen.io/assets/embed/ei.js"></script>
{% endblock %}
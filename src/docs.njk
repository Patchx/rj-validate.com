{% set current_page = 'docs' %}

<!doctype html>
<html lang="en" class="no-js">
<head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">

    <title>Documentation | RJ Validate</title>

    <link href="/css/style.css" rel="stylesheet" integrity="">
</head>

<body class="td-section">
    {% include "./templates/partials/header.njk" %}

    <div class="container-fluid td-outer">
        <div class="td-main">
            <div class="row flex-xl-nowrap">
                {% include "./templates/partials/left-navigation.njk" %}

                <main class="col-12 col-md-9 col-xl-8 pl-md-5" role="main">
                    <div class="td-content">
	                   <h1>Documentation</h1>
	
                        <div class="pageinfo pageinfo-primary">
                            <p>This is a placeholder page that shows you how to use this template site.</p>
                        </div>

                        <p>This section is where the user documentation for your project lives - all the information your users need to understand and successfully use your project.</p>

                        <p>For large documentation sets we recommend adding content under the headings in this section, though if some or all of them donâ€™t apply to your project feel free to remove them or add your own. You can see an example of a smaller Docsy documentation site in the <a href="https://docsy.dev/docs/" target="_blank">Docsy User Guide</a>, which lives in the <a href="https://github.com/google/docsy/tree/master/userguide" target="_blank">Docsy theme repo</a> if you&rsquo;d like to copy its docs section.</p>

                        <div class="section-index">
                            <hr class="panel-line">
                            
                            <h2>Why use rj-validate?:</h2>

                            <p>There are a ton of validation libraries out there. However, many of these libraries:</p>

                            <ul>
                                <li>Are tightly coupled to another framework (see jQuery Validate, VeeValidate, etc)</li>
                                <li>Assume server/client environment (jQuery Validate, et al.)</li>
                                <li>Assume where and how you want to display the error to the user (..again, see jQuery Validate, et al.)</li>
                                <li>Use complicated, verbose syntaxes</li>
                                <li>Have unnecessary dependencies (..and are all these dependencies free of malicious code?)</li>
                            </ul>

                            <p>rj-validate was built to be a simple, easy to use validation library that can be used across the stack, regardless of the other javascript frameworks you might be using.</p>

                            <h2># How to install:</h2>

                            <p>via npm:</p>

                            <p><code>npm install rj-validate --save</code></p>

                            <p>via a CDN:</p>

                            <p><code>&lt;script src="https://cdn.jsdelivr.net/npm/rj-validate@1.3.1/dist/rj.min.js"&gt;&lt;/script&gt;</code></p>


                            <h2># How to use:</h2>

                            <p>Validating an input:</p>

                            <p><code> require("rj-validate");<br>

                            rj().validate('abc123', {<br>
                                required: true<br>
                            });<br>

                            // output:<br>
                            // Object {message: "all tests pass", valid: true}<br>
                            </code>


                            <p>The validate() and test() methods are interchangeable:</p>

                            <p><code>
                            require("rj-validate");

                            rj().test('abc123', {
                                required: true
                            });

                            // output:
                            // Object {message: "all tests pass", valid: true}
                            </code></p>

                            <p>The validate() method takes three arguments:</p>

                            <p><code>
                            rj().validate(
                                [ the input to validate (either a string or a number) ],
                                [ the rules to test the input against (object) ],
                                [ the name of the variable (a string) (optional) ]
                            )</code>
                            </p>

                            <p>The third argument is only used for displaying contextualized error messages.</p>

                            <p>The output of the validate() method is an object with the following structure:</p>

                            <p><code>
                            {
                                valid: (true|false),
                                message: (the specific error message)
                            }
                            </code></p>

                            <p>If you would like to replace the default error message with your own, you can pass that message into the rules argument:</p>

                            <p><code>
                            rj().test('', {
                                required: true,
                                required_msg: "That's a failure"
                            });

                            // output:
                            // Object {message: "That's a failure", valid: false}
                            </code></p>

                            <p>For each rule that you'd like to have a custom error message, add a [rule]_msg option to the rules argument, as shown above.</p>

                            <p>In some scenarios, you may not be interested in the specific error message and you only want to know if the request passes all validations. In those situations, you can use isValid()</p>

                            <p><code>
                            rj().isValid('1987-10-01', {
                                required: true,
                                date: 'yyyy-mm-dd',
                                before: '1980-01-01'
                            });

                            // output:
                            // false
                            </code></p>

                            <p>Available validation options:</p>

                            <p><code>
                            rules = {
                                required:         (true|false),
                                same:             {name: (string), value: (string|number|boolean)},
                                different:        {name: (string), value: (string|number|boolean)},
                                min:              (integer|false),
                                max:              (integer|false),
                                alpha:            (true|false),
                                alphanumeric:     (true|false),
                                numeric:          (true|false|'number'|'string'),
                                number:           (true|false),
                                string:           (true|false),
                                date:             (true|false|'yyyy-mm-dd'|'mm/dd/yyyy'|'mm/dd/yy'),
                                datetime:         (true|false|'yyyy-mm-dd hh:mm:ss'|'mm/dd/yyyy hh:mm:ss'|'mm/dd/yy hh:mm:ss'),
                                email:            (true|false),
                                po_box:           (true|false),
                                not_po_box:       (true|false),
                                in:               (array|object|false),
                                not_in:           (array|object|false),
                                before:           (string|Date|false),
                                before_or:        (string|Date|false),
                                after:            (string|Date|false),
                                after_or:         (string|Date|false)
                            }
                            </code></p>

                            <p>Note that a [rule]:false will always be considered valid. This option exists solely to help dynamically specify rules at runtime.</p>

                            <p>If you need to use a validation rule that isn't in the list above, you can create a custom rule. Here is an example of a custom rule that checks if the first letter in a line of text is capitalized:</p>

                            <p><code>
                            function startsWithCapital(input) {
                                return input[0] === input[0].toUpperCase();
                            }

                            require("rj-validate");

                            rj().test('the quick brown fox jumps over the lazy dog', {
                                required: true,
                                min: 4,
                                custom: [{
                                    test: function(input) {
                                        return startsWithCapital(input);
                                    },
                                    error_msg: 'Please start your sentences with a capital letter.'
                                }]
                            });

                            // output:
                            // Object {message: "Please start your sentences with a capital letter.", valid: false}

                            </code></p>

                            <p>You can pass as many custom rules into the validator as you would like:</p>

                            <p><code>
                            function startsWithCapital(input) {
                                return input[0] === input[0].toUpperCase();
                            }

                            function endsWithPeriod(input) {
                                return input.slice(-1) === '.';
                            }

                            require("rj-validate");

                            rj().test('The quick brown fox jumps over the lazy dog', {
                                required: true,
                                min: 4,
                                custom: [
                                    {
                                        test: function(input) {
                                            return startsWithCapital(input);
                                        },
                                        error_msg: 'Please start your sentences with a capital letter.'
                                    },

                                    {
                                        test: function(input) {
                                            return endsWithPeriod(input);
                                        },
                                        error_msg: 'Please finish your sentences with a period.'
                                    },
                                ]
                            });

                            // output:
                            // Object {message: "Please finish your sentences with a period.", valid: false}

                            </code></p>

                            <p>Custom rules give you a high degree of flexibility, while still working within the framework of a validation library. You can even use the custom validations array to reorganize which validations run before others:</p>

                            <p><code>
                            function startsWithCapital(input) {
                                return input[0] === input[0].toUpperCase();
                            }

                            function endsWithPeriod(input) {
                                return input.slice(-1) === '.';
                            }

                            require("rj-validate");

                            rj().test('the', {
                                required: true,
                                custom: [
                                    {
                                        test: function(input) {
                                            return startsWithCapital(input);
                                        },
                                        error_msg: 'Please start your sentences with a capital letter.'
                                    },

                                    {
                                        test: function(input) {
                                            return endsWithPeriod(input);
                                        },
                                        error_msg: 'Please finish your sentences with a period.'
                                    },

                                    {
                                        test: function(input) {
                                            return rj().isValid(input, {min: 4});
                                        },
                                        error_msg: 'Sentence is too short. Is this a sentence fragment?'
                                    },
                                ]
                            });

                            // output:
                            // Object {message: "Please start your sentences with a capital letter.", valid: false}

                            </code></p>

                            <p>You can also validate multiple inputs at the same time with the validateAll() method:</p>

                            <p><code>
                            require("rj-validate");

                            rj().validateAll([
                                {
                                    name: 'first name',
                                    value: 'Hubert!',
                                    rules: {
                                        required: true,
                                        min: 2,
                                        alpha: true
                                    },
                                },

                                {
                                    name: 'middle name',
                                    value: 'J',
                                    rules: {
                                        min: 2,
                                        alpha: true
                                    }
                                },

                                {
                                    name: 'last name',
                                    value: 'Farnsworth',
                                    rules: {
                                        required: true,
                                        min: 2,
                                        alpha: true
                                    }
                                },

                                {
                                    name: 'suffix',
                                    value: '',
                                    rules: {
                                        in: ['Jr', 'Sr', 'III', 'IV']
                                    }
                                }
                            ]);

                            // output:
                            Object {
                                'first name': {
                                    valid: false,
                                    message: 'first name may only contain letters'
                                },

                                'middle name': {
                                    valid: false,
                                    message: 'middle name must be 2 or longer'
                                },

                                'last name': {
                                    valid: true,
                                    message: 'All tests pass'
                                },

                                'suffix': {
                                    valid: true,
                                    message: 'All tests pass'
                                }
                            }

                            </code></p>

                            <h2># More Examples:</h2>

                            <p><code>
                            require("rj-validate");

                            var rj = rj();

                            rj.test('abc123', {
                                required: true
                            });

                            // output:
                            // Object {message: "all tests pass", valid: true}


                            rj.test('', {
                                required: true
                            });

                            // output:
                            // Object {message: "Required", valid: false}


                            rj.test('', {
                                required: true
                            }, 'first name');

                            // output:
                            // Object {message: "first name is required", valid: false}


                            rj.test('', {
                                required: true,
                                required_msg: "That's a failure"
                            });

                            // output:
                            // Object {message: "That's a failure", valid: false}


                            rj.validate('foobar', {
                                required: true,
                                required_msg: 'Profile name is definitely required',
                                min: 7,
                                min_msg: "Hold on, that profile name isn't long enough"
                            });

                            // output:
                            // Object {message: "Hold on, that profile name isn't long enough", valid: false}
                            </code></p>

                            <h2># Changelog</h2>

                            <p>v1.1.0</p>

                            <p>The library now exports a function instead of a object. The readme file and tests have been updated to reflect this change.</p>

                            <p>v1.2.0</p>

                            <p>Fixed a bug with module exports and using the library as a CDN</p>

                            <p>v1.3.1</p>

                            <p>Fixed a bug with using the library as a CDN</p>
                        </div>

                        <br />

                        <div class="text-muted mt-5 pt-3 border-top">
                            <span>Last modified {{ g_last_modified }}</span>
                        </div>
                    </div>
                </main>
            </div>
        </div>
        {% include "./templates/partials/footer.njk" %}
    </div>
</body>
</html>